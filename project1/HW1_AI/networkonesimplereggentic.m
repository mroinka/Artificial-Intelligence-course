% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 19-Dec-2023 21:15:37

% networkonesimplereg(with genetic algorithm for Optimazation number of
% layer neuruns)

% This script assumes these variables are defined:
%
%   SynchronousMachineinputs - input data.
%   SynchronousMachineoutputs - target data.

x = SynchronousMachineinputs';
t = SynchronousMachineoutputs';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network[with increase the hiddien layer and change of tra
% sfer function of neourons of each layer]
hiddenLayerSize = [5,5]
net.layers{1}.transferFcn = 'tansig';
net.layers{2}.transferFcn = 'tansig'
net = fitnet(hiddenLayerSize,trainFcn);

%genetic Algrithm
% ایجاد تابع هدف برای الگوریتم جستجوی تصادفی
fitnessFunction = @(neurons) trainAndEvaluate(neurons, x, t);

% تعداد تکرار جستجو
numIterations = 50;

% جستجوی تصادفی برای بهینه‌سازی شبکه
for i = 1:numIterations
    % تنظیم تعداد نورون‌ها به صورت تصادفی
    randomNeurons = randi([5, 20], 1, numel(net.layers)-1);
    net.layers(1:end-1) = num2cell(randomNeurons);

    % آموزش شبکه
    net = train(net, x, t);
    
    % ارزیابی عملکرد شبکه
    performance(i) = perform(net, t, net(x));
end

% پیدا کردن بهترین ساختار
bestPerformance = min(performance);
bestIndex = find(performance == bestPerformance, 1);

% بهینه‌سازی شبکه با بهترین ساختار
bestNeurons = randomNeurons(bestIndex);
net.layers(1:end-1) = num2cell(bestNeurons);
net = train(net,x,t);


   

   


% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

